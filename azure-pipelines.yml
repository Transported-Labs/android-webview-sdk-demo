trigger:
  batch: true
  branches:
    include:
    - main
    # - develop
    # - testing
    # - staging

variables:
  vmImageUbu: 'ubuntu-latest'
  tplProjectName: 'android-webview-sdk-demo'
  # ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  #   webAppName: prod-dxp
  #   cdnAccountName: proddxpcdn
  #   cdnGroup: prod-dxp-grp
  #   cdnEndpoint: prod-dxp
  #   domainDXP: tldxp.com
  #   saveLast: 10
  #   uriPath: 'webview-sdk/android''
  #   performPurgeCDN: true
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    webAppName: dev-dxp
    cdnAccountName: devdxpcdn
    cdnGroup: dev-dxp-grp
    cdnEndpoint: dev-dxp
    domainDXP: developdxp.com
    saveLast: 10
    uriPath: 'webview-sdk/android'
    performPurgeAFD: true
  ${{ elseif eq(variables['Build.SourceBranchName'], 'develop') }}:
    webAppName: dev-dxp
    cdnAccountName: devdxpcdn
    cdnGroup: dev-dxp-grp
    cdnEndpoint: dev-dxp
    domainDXP: developdxp.com
    saveLast: 10
    uriPath: 'webview-sdk/android'
    performPurgeAFD: true
  # ${{ elseif eq(variables['Build.SourceBranchName'], 'testing') }}:
  #   webAppName: test-dxp
  #   cdnAccountName: testdxpcdn
  #   cdnGroup: test-dxp-grp
  #   cdnEndpoint: test-dxp
  #   domainDXP: testingdxp.com
  #   saveLast: 10
  #   uriPath: 'webview-sdk/android'
  #   # temporary var performPurgeAFD
  #   performPurgeAFD: true
  # ${{ elseif eq(variables['Build.SourceBranchName'], 'staging') }}:
  #   webAppName: stag-dxp
  #   cdnAccountName: stagdxpcdn
  #   cdnGroup: stag-dxp-grp
  #   cdnEndpoint: stag-dxp
  #   domainDXP: stagingdxp.com
  #   saveLast: 10
  #   uriPath: 'webview-sdk/android'
  #   performPurgeCDN: true
  ${{ elseif eq(variables['Build.Reason'], 'PullRequest') }}:
    cdnAccountName: devdxpcdn
    cdnGroup: dev-dxp-grp
    cdnEndpoint: dev-dxp
    domainDXP: developdxp.com
    saveLast: 10
    uriPath: 'webview-sdk/android'

parameters:
- name: cdnAccountName
  displayName: cdnAccountName
  type: string
  default: $(cdnAccountName)
- name: cdnGroup
  displayName: cdnGroup
  type: string
  default: $(cdnGroup)
- name: cdnEndpoint
  displayName: cdnEndpoint
  type: string
  default: $(cdnEndpoint)
- name: domainDXP
  displayName: domainDXP
  type: string
  default: $(domainDXP)
- name: deleteOlderCDN
  displayName: deleteOlderCDN
  type: string
  default: $(deleteOlderCDN)
- name: uriPath
  displayName: uriPath
  type: string
  default: $(uriPath)
- name: X_API
  displayName: X_API
  type: string
  default: undefined
- name: webAppName
  type: string
  default: $(webAppName)
- name: customPerformPurgeAFD
  type: boolean
  default: false

stages:
  - stage: build
    displayName: Build stage
    pool:
      vmImage: $(vmImageUbu)
    jobs:
      - job: BuildAndPublishAndroidWebviewSdkDemo
        steps:

          - script: |
              echo '' >> local.properties
              echo com.cueaudio.maven.bucket=$COM_CUEAUDIO_MAVEN_BUCKET >> local.properties
              echo com.cueaudio.maven.username=$COM_CUEAUDIO_MAVEN_USERNAME >> local.properties
              echo com.cueaudio.maven.password=$COM_CUEAUDIO_MAVEN_PASSWORD >> local.properties
            displayName: set com.cueaudio.maven.* for aar
            env:
              COM_CUEAUDIO_MAVEN_BUCKET: $(COM_CUEAUDIO_MAVEN_BUCKET)
              COM_CUEAUDIO_MAVEN_USERNAME: $(COM_CUEAUDIO_MAVEN_USERNAME)
              COM_CUEAUDIO_MAVEN_PASSWORD: $(COM_CUEAUDIO_MAVEN_PASSWORD)

          - script: |
              mkdir -p ../android-webview-sdk/lib/build/outputs/aar/
            displayName: mkdir outputs/aar

          - task: AzureCLI@2
            displayName: 'Download {debug,release}/latest.aar'
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az storage blob download --account-name ${{parameters.cdnAccountName}} --container-name '$web' --file $(System.DefaultWorkingDirectory)/../android-webview-sdk/lib/build/outputs/aar/lib-debug.aar --name "webview-sdk/android/debug/latest.aar"
                az storage blob download --account-name ${{parameters.cdnAccountName}} --container-name '$web' --file $(System.DefaultWorkingDirectory)/../android-webview-sdk/lib/build/outputs/aar/lib-release.aar --name "webview-sdk/android/release/latest.aar" 
              useGlobalConfig: true


          - bash: |
              set -e
              ls -lFht $(System.DefaultWorkingDirectory)/../android-webview-sdk/lib/build/outputs/aar/
              rm gradlew
              gradle wrapper
              ls -lFht
              ./gradlew assemble
            displayName: Build apk

          - bash: |
              ls -lFht ./app/build/outputs/apk/**
            displayName: Show Files 

          - script: |
              rm $(System.DefaultWorkingDirectory)/app/build/outputs/apk/{release,debug}/output-metadata.json
              echo === MOVE release/app-release-unsigned.apk TO release/demo-latest.apk  ===
              mv $(System.DefaultWorkingDirectory)/app/build/outputs/apk/release/app-release-unsigned.apk $(System.DefaultWorkingDirectory)/app/build/outputs/apk/release/demo-latest.apk
              
              echo === COPY release/latest.apk TO release/b$(Build.BuildId).apk ===
              cp $(System.DefaultWorkingDirectory)/app/build/outputs/apk/release/demo-latest.apk $(System.DefaultWorkingDirectory)/app/build/outputs/apk/release/demo-b$(Build.BuildId).apk 
              
              echo === MOVE debug/app-debug.apk TO debug/demo-latest.apk  ===
              mv $(System.DefaultWorkingDirectory)/app/build/outputs/apk/debug/app-debug.apk $(System.DefaultWorkingDirectory)/app/build/outputs/apk/debug/demo-latest.apk
              
              echo === COPY debug/latest.apk TO debug/b$(Build.BuildId).apk ===
              cp $(System.DefaultWorkingDirectory)/app/build/outputs/apk/debug/demo-latest.apk $(System.DefaultWorkingDirectory)/app/build/outputs/apk/debug/demo-b$(Build.BuildId).apk
              
              echo === SHOW apk FILES === 
              ls -lFht $(System.DefaultWorkingDirectory)/app/build/outputs/apk/**
            displayName: move to demo-latest.apk

          - task: ArchiveFiles@2
            displayName: 'Archive apk'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              rootFolderOrFile: $(System.DefaultWorkingDirectory)/app/build/outputs/apk
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)_${{ variables.tplProjectName }}.zip
              replaceExistingArchive: true

          - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)_${{ variables.tplProjectName }}.zip
            artifact: drop
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - deployment: Deploy
        displayName: Deploy stage
        environment: ${{parameters.cdnAccountName}}

        pool:
          vmImage: $(vmImageUbu)
        strategy:
          runOnce:
            deploy:
              steps:

                - bash: |
                    echo ${{ parameters.cdnAccountName }}
                    echo ${{ parameters.cdnGroup }}
                    echo ${{ parameters.cdnEndpoint }}
                    echo ${{ parameters.domainDXP }}
                    echo ${{ parameters.deleteOlderCDN }}
                    echo ${{ parameters.uriPath }}
                  displayName: Show Parameters Value

                - task: ExtractFiles@1
                  displayName: 'Extract ${{ variables.tplProjectName }} ${{ parameters.cdnAccountName }}'
                  inputs:
                    destinationFolder: ./${{ variables.tplProjectName }}
                    archiveFilePatterns: $(Pipeline.Workspace)/drop/$(Build.BuildId)_${{ variables.tplProjectName }}.zip
                    cleanDestinationFolder: true
                    overwriteExistingFiles: false

                - task: AzureCLI@2
                  displayName: Deploy ${{ variables.tplProjectName }} ${{parameters.cdnAccountName}}
                  inputs:
                    azureSubscription: $(AZURE_SUBSCRIPTION)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: 'az storage blob upload-batch -d "\$web/${{ parameters.uriPath }}" -s ./${{ variables.tplProjectName }} --account-name ${{parameters.cdnAccountName}} --overwrite=true'
                    useGlobalConfig: true

                - task: AzureCLI@2
                  displayName: Leave the last ${{variables.saveLast}} files for CDN ${{variables.cdnAccountName}} in webview-sdk/android/release/demo-b*
                  inputs:
                    azureSubscription: $(AZURE_SUBSCRIPTION)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "------------------------------"
                      echo ""The Last ${{variables.saveLast}} Files" - webview-sdk/android/release/demo-b"
                      echo "------------------------------"
                      az storage blob list --only-show-errors -c \$web --account-name ${{variables.cdnAccountName}} --prefix "webview-sdk/android/release/demo-b" --query \
                      "sort_by([].{name:name, Date:properties.lastModified}, &Date)" -otsv
                      echo "------------------------------"
                      echo "Files will be deleted in the ${{variables.saveLast}}"
                      echo "------------------------------"
                      az storage blob list --only-show-errors -c \$web --account-name ${{variables.cdnAccountName}} --prefix "webview-sdk/android/release/demo-b" --query \
                      "sort_by([].{name:name, Date:properties.lastModified}, &Date)" -otsv|awk '{print $1}'|head -n -${{variables.saveLast}}
                      echo "------------------------------"
                      echo "Deleting"
                      echo "------------------------------"
                      az storage blob list --only-show-errors -c \$web --account-name ${{variables.cdnAccountName}} --prefix "webview-sdk/android/release/demo-b" --query \
                      "sort_by([].{name:name, Date:properties.lastModified}, &Date)" -otsv|awk '{print $1}'|head -n -${{variables.saveLast}} \
                      | xargs -rtL1 -I {} \
                      az storage blob delete-batch --only-show-errors --source \$web --account-name ${{variables.cdnAccountName}} --pattern {}
                    useGlobalConfig: true

                - task: AzureCLI@2
                  displayName: Leave the last ${{variables.saveLast}} files for CDN ${{variables.cdnAccountName}} in webview-sdk/android/debug/demo-b*
                  inputs:
                    azureSubscription: $(AZURE_SUBSCRIPTION)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "------------------------------"
                      echo ""The Last ${{variables.saveLast}} Files" - webview-sdk/android/debug/demo-b"
                      echo "------------------------------"
                      az storage blob list --only-show-errors -c \$web --account-name ${{variables.cdnAccountName}} --prefix "webview-sdk/android/debug/demo-b" --query \
                      "sort_by([].{name:name, Date:properties.lastModified}, &Date)" -otsv
                      echo "------------------------------"
                      echo "Files will be deleted in the ${{variables.saveLast}}"
                      echo "------------------------------"
                      az storage blob list --only-show-errors -c \$web --account-name ${{variables.cdnAccountName}} --prefix "webview-sdk/android/debug/demo-b" --query \
                      "sort_by([].{name:name, Date:properties.lastModified}, &Date)" -otsv|awk '{print $1}'|head -n -${{variables.saveLast}}
                      echo "------------------------------"
                      echo "Deleting"
                      echo "------------------------------"
                      az storage blob list --only-show-errors -c \$web --account-name ${{variables.cdnAccountName}} --prefix "webview-sdk/android/debug/demo-b" --query \
                      "sort_by([].{name:name, Date:properties.lastModified}, &Date)" -otsv|awk '{print $1}'|head -n -${{variables.saveLast}} \
                      | xargs -rtL1 -I {} \
                      az storage blob delete-batch --only-show-errors --source \$web --account-name ${{variables.cdnAccountName}} --pattern {}
                    useGlobalConfig: true

